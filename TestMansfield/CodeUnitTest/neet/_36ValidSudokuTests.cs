using Microsoft.VisualStudio.TestTools.UnitTesting;
using ClassLibrary1;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClassLibrary1.Tests
{
    [TestClass()]
    public class _36ValidSudokuTests
    {
/*        [TestMethod()]
        public void IsValidSudokuTest1()
        {
            char[][] input = new char[][] {  new char[] {'5', '3', '.', '.', '7', '.', '.', '.', '.' }
                                            ,new char[] {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
                                            ,new char[] {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
                                            ,new char[] {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
                                            ,new char[] {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
                                            ,new char[] {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
                                            ,new char[] {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
                                            ,new char[] {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
                                            ,new char[] {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};

            Assert.AreEqual(true, new _36ValidSudoku().IsValidSudoku(input));

        }*/

        /*
         * 
           n[0][0-8] //row
           n[1][0-8]
            ..
           n[8][0-8]         
          
         
           n[0-8][0] //column
           n[0-8][1]
            ..
           n[0-8][8]         
         
         
            n[0-2][0-2]
            n[0-2][3-5]
            n[0-2][6-8]

            n[3-5][0-2]
            n[3-5][3-5]
            n[3-5][3-5]

            n[6-8][0-2]
            n[6-8][3-5]
            n[6-8][3-5]

         */

        /*        [TestMethod()]
                public void IsValidSudokuTest2()
                {
                    char[][] input = new char[][] {  new char[] {'8', '3', '.', '.', '7', '.', '.', '.', '.' }
                                                    ,new char[] {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
                                                    ,new char[] {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
                                                    ,new char[] {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
                                                    ,new char[] {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
                                                    ,new char[] {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
                                                    ,new char[] {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
                                                    ,new char[] {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
                                                    ,new char[] {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};

                    Assert.AreEqual(false, new _36ValidSudoku().IsValidSudoku(input));

                }*/


        /*

         [[".",".",".",".","5",".",".","1","."],
        [".","4",".","3",".",".",".",".","."],
        [".",".",".",".",".","3",".",".","1"],
        ["8",".",".",".",".",".",".","2","."],
        [".",".","2",".","7",".",".",".","."],
        [".","1","5",".",".",".",".",".","."],
        [".",".",".",".",".","2",".",".","."],
        [".","2",".","9",".",".",".",".","."],
        [".",".","4",".",".",".",".",".","."]]
         */

        //[TestMethod()]
        //public void IsValidSudokuTest3()
        //{
        //    char[][] input = new char[][] {  new char[] { '.', '.', '.', '.', '5', '.', '.', '1', '.' }
        //                                    ,new char[] { '.', '4', '.', '3', '.', '.', '.', '.', '.' }                                            
        //                                    ,new char[] { '.', '.', '.', '.', '.', '3', '.', '.', '1' }
        //                                    ,new char[] { '8', '.', '.', '.', '.', '.', '.', '2', '.' }
        //                                    ,new char[] { '.', '.', '2', '.', '7', '.', '.', '.', '.' }
        //                                    ,new char[] { '.', '1', '5', '.', '.', '.', '.', '.', '.' }
        //                                    ,new char[] { '.', '.', '.', '.', '.', '2', '.', '.', '.' }
        //                                    ,new char[] { '.', '2', '.', '9', '.', '.', '.', '.', '.'}
        //                                    ,new char[] { '.', '.', '4', '.', '.', '.', '.', '.', '.' }};

        //    Assert.AreEqual(false, new _36ValidSudoku().IsValidSudoku(input));

        //}
    }
}